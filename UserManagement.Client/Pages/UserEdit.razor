@page "/edit/{Id:long}"
@page "/view/{Id:long}"
@page "/add"
@inject ApiClient Api
@inject NavigationManager Nav
@attribute [Authorize]

<h3 class="mb-3">@Title</h3>

@if (loading)
{
    <p>Loading…</p>
}
else if (notFound)
{
    <div class="alert alert-warning">User not found.</div>
    <button class="btn btn-secondary" type="button" @onclick="GoBack">Back</button>
}
else
{
    @if (IsReadOnly)
    {
        <div class="vstack gap-2 mb-3">
            <input class="form-control" value="@model.Forename" placeholder="Forename" readonly />
            <input class="form-control" value="@model.Surname" placeholder="Surname" readonly />
            <input class="form-control" value="@model.Email" placeholder="Email" readonly />
            <input class="form-control" value="@dobString" placeholder="Date of Birth (yyyy-MM-dd)" readonly />
            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="isActive" checked="@model.IsActive" disabled />
                <label class="form-check-label" for="isActive">Active</label>
            </div>
        </div>
        <button class="btn btn-secondary" type="button" @onclick="GoBack">Back</button>
    }
    else
    {
        <EditForm Model="editModel" OnValidSubmit="Save">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="vstack gap-2 mb-3">
                <InputText class="form-control" @bind-Value="editModel.Forename" placeholder="Forename" />
                <InputText class="form-control" @bind-Value="editModel.Surname" placeholder="Surname" />
                <InputText class="form-control" @bind-Value="editModel.Email" placeholder="Email" />
                <InputText class="form-control" @bind-Value="dobString" placeholder="Date of Birth (yyyy-MM-dd)" />
                <div class="form-check">
                    <InputCheckbox class="form-check-input" id="isActive2" @bind-Value="editModel.IsActive" />
                    <label class="form-check-label" for="isActive2">Active</label>
                </div>
            </div>

            <div class="d-flex gap-2">
                <button class="btn btn-primary" type="submit">Save</button>
                <button class="btn btn-secondary" type="button" @onclick="GoBack">Back</button>
            </div>
        </EditForm>
    }
}

@code {
    [Parameter] public long? Id { get; set; }

    enum PageMode { Add, Edit, View }
    PageMode Mode => UriIsView ? PageMode.View : (Id is null ? PageMode.Add : PageMode.Edit);
    bool UriIsView => Nav.Uri.Contains("/view/", StringComparison.OrdinalIgnoreCase);

    bool IsNew => Mode == PageMode.Add;
    bool IsReadOnly => Mode == PageMode.View;
    string Title => Mode switch
    {
        PageMode.Add => "Add User",
        PageMode.Edit => "Edit User",
        PageMode.View => "View User",
        _ => "User"
    };

    bool loading = true;
    bool notFound = false;

    UserDto model = new(0L, "", "", "", true, DateOnly.FromDateTime(DateTime.Today));
    EditVm editModel = new();
    string dobString = DateOnly.FromDateTime(DateTime.Today).ToString("yyyy-MM-dd");

    protected override async Task OnInitializedAsync()
    {
        if (!IsNew)
        {
            var u = await Api.GetUserAsync(Id!.Value);
            if (u is null)
            {
                notFound = true; loading = false; return;
            }
            model = u;
            dobString = u.DateOfBirth.ToString("yyyy-MM-dd");
        }

        editModel = new EditVm
        {
            Forename = model.Forename,
            Surname = model.Surname,
            Email = model.Email,
            IsActive = model.IsActive
        };

        loading = false;
    }

    async Task Save()
    {
        if (!DateOnly.TryParse(dobString, out var dob))
            dob = DateOnly.FromDateTime(DateTime.Today);

        if (IsNew)
        {
            await Api.CreateUserAsync(new CreateUserDto(
                editModel.Forename, editModel.Surname, editModel.Email, editModel.IsActive, dob));
        }
        else
        {
            await Api.UpdateUserAsync(model.Id, new UpdateUserDto(
                editModel.Forename, editModel.Surname, editModel.Email, editModel.IsActive, dob));
        }

        GoBack();
    }

    void GoBack() => Nav.NavigateTo("/");

    public class EditVm
    {
        [System.ComponentModel.DataAnnotations.Required] public string Forename { get; set; } = "";
        [System.ComponentModel.DataAnnotations.Required] public string Surname { get; set; } = "";
        [System.ComponentModel.DataAnnotations.Required] public string Email { get; set; } = "";
        public bool IsActive { get; set; } = true;
    }
}
